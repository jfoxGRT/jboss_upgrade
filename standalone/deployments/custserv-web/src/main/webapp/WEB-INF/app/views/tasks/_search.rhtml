<%= javascript_include_tag "jquery/tabletools/TableTools.min.js" %>
<%= javascript_include_tag "jquery/tabletools/plugins/tabletools.download.min.js" %>
<%= javascript_include_tag "jquery/jquery_shared_utilities.min.js" %>
<%= stylesheet_link_tag "jquery/tabletools/TableTools.css" %>
<script>
jQuery(document).ready(function() {
    jQuery('#results_table').dataTable({
        "aaSorting": [[0, "desc"]],
        "oLanguage": {
            "oPaginate": {
                "sNext": "",
                "sPrevious": ""
             },
             "sEmptyTable": "No tasks match the Finder search criteria.",
             "sZeroRecords": "No tasks match the filter criteria."
        },
        "sDom": 'T<"clear">lfrtip',
        "oTableTools": {
          "sSwfPath": "<%= DATATABLES_SWF_PATH %>copy_csv_xls_pdf_custom.swf",
          "aButtons": [
            <% # if result set is small enough, use built-in tabletools CSV generation. make request to
               # server iff not all results were delivered to the DataTable. we don't have back end handling
               # for XLS and PDF.
               if @num_rows_reported < FINDER_LIMIT %>
            {
              "sExtends": "copy",
              "mColumns": get_export_columns_array(),
              "fnCellRender": function ( sValue, iColumn, nTr, iDataIndex ) {
                return getCleanedText(sValue);
              }
            },
            {
              "sExtends": "csv",
              "mColumns": get_export_columns_array(),
              "sFileName": "<%= TASK_FINDER_RESULTS_FILENAME %>.csv",
              "fnCellRender": function ( sValue, iColumn, nTr, iDataIndex ) {
                return getCleanedText(sValue);
              }
            },
            {
              "sExtends": "xls",
              "mColumns": get_export_columns_array(),
              "sFileName": "<%= TASK_FINDER_RESULTS_FILENAME %>.xls",
              "sButtonText": "XLS",
              "fnCellRender": function ( sValue, iColumn, nTr, iDataIndex ) {
                return getCleanedText(sValue);
              }
            },
            {
    					"sExtends": "pdf",
              "mColumns": get_export_columns_array(),
    					"sPdfOrientation": "landscape",
              "sFileName": "<%= TASK_FINDER_RESULTS_FILENAME %>.pdf",
              "sTitle": "<%= TASK_FINDER_RESULTS_FILENAME %>",
              "fnCellRender": function ( sValue, iColumn, nTr, iDataIndex ) {
                return getCleanedText(sValue);
              }
    				},
            "print"
            <% else %>
            {
              "sExtends": "text",
              "sButtonText": "Copy",
              "sToolTip": "Too many results to copy."
            },
            {
              "sExtends": "download",
              "sButtonText": "CSV",
              "sUrl": "<%= APP_CONTEXT_PATH %>/tasks/export_tasks_to_csv"
            },
            {
              "sExtends": "text",
              "sButtonText": "XLS",
              "sToolTip": "Too many results for XLS export."
            },
            {
              "sExtends": "text",
              "sButtonText": "PDF",
              "sToolTip": "Too many results for PDF export."
            },
            {
              "sExtends": "text",
              "sButtonText": "Print",
              "sToolTip": "Too many results to print."
            }
            <% end %>
    		]
  		}
    });
} );

<% # return the array of column indices that should be exported to the CSV/XLS/PDF.
   # in our case, omit the two columns to the far right.
%>
function get_export_columns_array() {
  <% if (@task_type == "pending_entitlement" || @task_type == "any") %>
    return [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ];
  <% else %>
    return [ 0, 1, 2, 3, 4, 5, 6, 7 ];
  <% end %>
}
</script>

<%= hidden_field_tag(:pull_the_blinds, "1") %>

<%= render(:partial => "common/search_header", :locals => {:report_title => "SAMC - Task Search Results"})%>
<% if (@errors.length < 1) %> 
<table class="data_table filterable_table" id="results_table" align="left">
	<thead>
		<tr class="data_table_first_row">
		  <th>ID</th>
      <th>Type</th>
      <th>Status</th>
      <th>Comment</th>
      <th>Created</th>
      <th>Closed</th>
	  <th>Closed By</th>
		  <% if (@task_type == "pending_entitlement" || @task_type == "any") %>
        <th>TMS Entitlement ID</th>
        <th><%= PRODUCT_TERM%></th>
	    <th>License Count</th>
		<th>Order #</th>
        <th>Invoice #</th>
      <% end %>
      <th><%= SAM_CUSTOMER_TERM %></th>
      <th>Action</th>
      <th>Status Message</th>
		</tr>
	</thead>
	<tbody>
		<%= render(:partial => "tasks/search_result", :collection => @tasks, :locals => {:pending_entitlement_task_type => @pending_entitlement_task_type, :number_of_tasks => @tasks.length}) %>
	</tbody>
</table>
<% end %>