<script type="text/javascript">

	function getTime(theDate) {
		// initialize time-related variables with current time settings
		var now = theDate;
		var hour = now.getHours();
		var minute = now.getMinutes();
		now = null;
		var ampm = ""; 

		// validate hour values and set value of ampm
		if (hour >= 12) {
			hour -= 12;
			ampm = "PM";
		} 
		else {
			ampm = "AM";
			hour = (hour == 0) ? 12 : hour;
		}
			

		// add zero digit to a one digit minute
		if (minute < 10)
			minute = "0" + minute; // do not parse this number!

		// return time string
		return hour + ":" + minute + " " + ampm;
	}

	function leapYear(year) {
		if (year % 4 == 0) // basic rule
			return true; // is leap year
		/* else */ // else not needed when statement is "return"
		return false; // is not leap year
	}

	function getDays(month, year) {
		// create array to hold number of days in each month
		var ar = new Array(12);
		ar[0] = 31; // January
		ar[1] = (leapYear(year)) ? 29 : 28; // February
		ar[2] = 31; // March
		ar[3] = 30; // April
		ar[4] = 31; // May
		ar[5] = 30; // June
		ar[6] = 31; // July
		ar[7] = 31; // August
		ar[8] = 30; // September
		ar[9] = 31; // October
		ar[10] = 30; // November
		ar[11] = 31; // December

		// return number of days in the specified month (parameter)
		return ar[month];
	}

	function getMonthName(month) {
		// create array to hold name of each month
		var ar = new Array(12);
		ar[0] = "January";
		ar[1] = "February";
		ar[2] = "March";
		ar[3] = "April";
		ar[4] = "May";
		ar[5] = "June";
		ar[6] = "July";
		ar[7] = "August";
		ar[8] = "September";
		ar[9] = "October";
		ar[10] = "November";
		ar[11] = "December";

		// return name of specified month (parameter)
		return ar[month];
	}

	function setCal(theDate) {
		// standard time attributes
		var now = theDate;
		var year = now.getYear();
		if (year < 1000);
			year+=1900
		var month = now.getMonth() - 1;
		var monthName = getMonthName(month);
		var date = now.getDate();
		now = null;

		// create instance of first day of month, and extract the day on which it occurs
		var firstDayInstance = new Date(year, month, 1);
		var firstDay = firstDayInstance.getDay();
		firstDayInstance = null;

		// number of days in current month
		var days = getDays(month, year);

		// call function to draw calendar
		drawCal(firstDay + 1, days, date, monthName, year, theDate);
	}

	function drawCal(firstDay, lastDate, date, monthName, year, specifiedDate) {

		// create basic table structure
		var text = "" // initialize accumulative variable to empty string
		text += '<table class="displayCalendarContainer" cellspacing="0"><tr><td><table cellspacing="0">'; // table settings
		text += '<tr class="displayCalendarHeaderRow"><th colspan="7" class="displayCalendarHeader">' + monthName + ' ' + year + '</th></tr>'; // close header cell

		// create array of abbreviated day names
		var weekDay = new Array(7);
		weekDay[0] = "Sun";
		weekDay[1] = "Mon";
		weekDay[2] = "Tue";
		weekDay[3] = "Wed";
		weekDay[4] = "Thu";
		weekDay[5] = "Fri";
		weekDay[6] = "Sat";

		// create first row of table to set column width and specify week day
		text += '<tr class="displayCalendarCellDayOfWeekRow">';
		for (var dayNum = 0; dayNum < 7; ++dayNum) {
			text += '<td class="displayCalendarCellDayOfWeek">' + weekDay[dayNum] + '</td>'; 
		}
		text += '</tr>'

		// declaration and initialization of two variables to help with tables
		var digit = 1;
		var curCell = 1;

		for (var row = 1; row <= Math.ceil((lastDate + firstDay - 1) / 7); ++row) {
			text += '<tr class="displayCalendarCellDateRow" style="text-align: right; vertical-align: top;">';
			for (var col = 1; col <= 7; ++col) {
				if (digit > lastDate) {
					var lastCol = col;
					break;
				}
				if (curCell < firstDay) {
					text += '<td class="calendarCellAbsent">&nbsp;</td>';
					curCell++;
				} 
				else {
					if (digit == date) { // current cell represent today's date
						text += '<td class="displayCalendarCellSpecified"><span class="displayCalendarCellSpecifiedDateColor">';
						text += digit;
						text += '</span><br/><span class="displayCalendarCellSpecifiedTimeColor">';
						text += getTime(specifiedDate);
						text += '</span></td>';
					} 
					else
						text += '<td class="displayCalendarCellPresent">' + digit + '</td>';
					digit++;
				}
			}
			if (digit > lastDate)
				for (var i = lastCol; i <= 7; i++)
					text += '<td class="displayCalendarCellAbsent">&nbsp;</td>';
			text += '</tr>';
		}

		// close all basic table tags
		text += '</table></td></tr></table>';

		// print accumulative HTML string
		document.write(text);
	}
	
</script>